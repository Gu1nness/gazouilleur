#!/bin/bash
# Bash service to start, stop or restart the bot

USAGE="$0 <start|stop|restart> [--nologs]"

BOTENV=gazouilleur
BOTPATH=##GAZOUILLEURPATH##

STOP=false
START=false
case "$1" in
  stop   )  STOP=true;;
  restart)  STOP=true
            START=true;;
  start  )  START=true;;
  *      )  echo "Usage: $USAGE"
            exit 1;;
esac

LOGS=true
if [ $# -gt 1 ] && [ "$2" == "--nologs" ]; then
  LOGS=false
fi

VERBOSE=true
if [ $# -gt 1 ] && [ "$2" == "--quiet" ]; then
  VERBOSE=false
fi


# Check config
cd $BOTPATH
mkdir -p log
if ! test -f gazouilleur/config.py; then
  echo "No config file found. Please run bin/configure.sh and edit gazouilleur/config.py"
  exit 1
fi

BOTNAME=$(grep '^\s*BOTNAME\s*=' gazouilleur/config.py | head -n 1 | sed "s/^\s*BOTNAME\s*=\s*['\"]//" | sed "s/['\"].*$//")
if test -z "$BOTNAME"; then
  echo "No BOTNAME is set in gazouilleur/config.py. Please edit it."
  exit 1
fi

PIDFILE=".lock.$BOTNAME.pid"

COMMAND="twistd --pidfile $PIDFILE -y $BOTPATH/gazouilleur/bot.py"
#COMMAND="python $BOTPATH/gazouilleur/bot.py"

function stop_gazouilleur {
  NOLOG=$1
  test -z "$NOLOG" && $VERBOSE && echo "Stopping Gazouilleur instance $BOTNAME..."
  if ! test -f $PIDFILE; then
    if test -z "$NOLOG"; then
      $VERBOSE && echo "...$PIDFILE is missing, searching process..."
    fi
    GAZOU_PID=$(pgrep -f "$COMMAND")
  else
    GAZOU_PID=$(cat $PIDFILE)
  fi
  if test -z "$GAZOU_PID" || ! ps -p $GAZOU_PID -f | grep "$COMMAND" > /dev/null ; then
    if test -z "$NOLOG"; then
      $VERBOSE && echo "...the bot does not seem like running."
      $VERBOSE && echo
    fi
    rm -f $PIDFILE
    return
  fi
  count=0
  if $VERBOSE; then
    killopts=""
  else killopts="-9"
  fi
  # First try to kill 3 times during 35 seconds to fit Twitter's stream exit poll then twice with "-9" during 25 more seconds
  while ps -p $GAZOU_PID > /dev/null && [ $count -lt 5 ]; do
    kill $killopts $GAZOU_PID
    if ps -p $GAZOU_PID > /dev/null; then
      sleep 12
      count=$(($count + 1))
      if [ $count -eq 3 ]; then
        killopts="-9"
      fi
    fi
  done
  if ps -p $GAZOU_PID > /dev/null; then
    echo "...could not stop the bot. Please try to kill -15 $GAZOU_PID"
    exit 1
  elif test -z "$NOLOG"; then
    $VERBOSE && echo "...stopped."
  fi
  rm -f $PIDFILE
}

function start_gazouilleur {
  $VERBOSE && echo "Starting Gazouilleur instance $BOTNAME..."
  GAZOU_PID=$(pgrep -f "$COMMAND")
  if ! test -z "$GAZOU_PID" && ps -p $GAZOU_PID -f | grep "$COMMAND" > /dev/null; then
    echo "...the bot is already running, please run bin/gazouilleur stop or bin/gazouilleur restart."
    exit 1
  fi
  if test -f $PIDFILE; then
    GAZOU_PID=$(cat $PIDFILE)
    if ! test -z "$GAZOU_PID" && ps -p $GAZOU_PID -f | grep "$COMMAND" > /dev/null; then
      echo "...the bot is already running, please run bin/gazouilleur stop or bin/gazouilleur restart."
      exit 1
    fi
    $VERBOSE && echo "...removing lost $PIDFILE file..."
    rm -f $PIDFILE
  fi
  source /usr/local/bin/virtualenvwrapper.sh || ( echo "Error: You must install virtualenvwrapper to use this starter: sudo pip -q install virtualenvwrapper" && exit 1 )
  workon $BOTENV
  $COMMAND 2>&1 || exit 1
  $VERBOSE && echo "...started..."
}

function test_success_in_log {
  tail -n 20 log/run.log | grep "Signed on as" > /dev/null
}
function test_error_in_log {
  tail -n 2 log/run.log | grep -i "Server Shut Down\|Error\|Exception" > /dev/null
}
function exit_on_error {
  stop_gazouilleur nolog
  echo "ERROR: Could not start Gazouilleur instance properly. See log below:"
  echo
  tail -n 30 log/run.log
  exit 1
}


if $STOP; then
  stop_gazouilleur
  find . -name *.pyc -type f -print | xargs rm -f
fi

if $START; then
  start_gazouilleur
  if $VERBOSE && $LOGS; then
    echo "Displaying logs now. Ctrl+C will only stop logs display. Run bin/gazouilleur stop to stop $BOTNAME..."
    echo
    tail -f log/run.log
  else
    ts=0
    sleep 0.5
    while [ $ts -lt 60 ] && ! test_success_in_log; do
      sleep 0.5
      ts=$(($ts + 1))
      if test_error_in_log; then
        exit_on_error
      fi
    done
    if test_error_in_log || ! test_success_in_log; then
      exit_on_error
    else
      $VERBOSE && echo "...connected."
      $VERBOSE && echo
    fi
  fi
fi

